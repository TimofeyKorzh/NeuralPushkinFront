{"version":3,"sources":["utils.js","utilsPoem.js","App.js","serviceWorker.js","index.js"],"names":["postGenerateTextEndpoint","fn","React","useState","data","complete","pending","error","res","setRes","req","setReq","useEffect","axios","then","catch","console","log","useAsyncEndpoint","url","method","params","text","temp","temperature","postGeneratePoemEndpoint","name","length","TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","a11yProps","makeStyles","theme","root","flexGrow","width","backgroundColor","palette","background","paper","App","toggle","setToggle","togglePoem","setTogglePoem","setText","setName","poem","setPoem","setTemperature","generatedText","postGenerateText","generatedPoem","postGeneratePoem","setValue","SpinnerAdornment","withStyles","marginLeft","CircularProgress","className","classes","spinner","size","style","AdornedButton","loading","rest","Button","marginTop","marginBottom","paddingBottom","color","useStyles","title","textAlign","document","THEME","createMuiTheme","typography","split","accounts","options","webvisor","noValidate","autoComplete","src","height","alt","Slider","defaultValue","getAriaValueText","valueLabelDisplay","step","marks","min","max","AppBar","position","elevation","Tabs","onChange","event","newValue","indicatorColor","textColor","variant","scrollButtons","aria-label","centered","Tab","label","class","face","TextField","target","whiteSpace","fontSize","onClick","multiline","fullWidth","href","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d63fc378.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ENDPOINT_URL = \"https://api.pushkin.monetka.name/push\";//куда делается запрос\r\n\r\nconst useAsyncEndpoint = fn => {\r\n    const [res, setRes] = React.useState({ data: null, complete: false, pending: false, error: false });\r\n    const [req, setReq] = React.useState();\r\n\r\n    React.useEffect(() => {\r\n        if (!req) return;\r\n        setRes({ data: null, pending: true, error: false, complete: false });\r\n        axios(req)\r\n            .then(res =>\r\n                setRes({ data: res.data, pending: false, error: false, complete: true })\r\n            )\r\n            .catch(() =>\r\n                setRes({ data: null, pending: false, error: true, complete: true })\r\n            );\r\n    }, [req]);\r\n    console.log(res);\r\n    return [res, (...args) => setReq(fn(...args))];\r\n}\r\n\r\nexport const postGenerateTextEndpoint = () => {\r\n    /* eslint-disable react-hooks/rules-of-hooks */\r\n    \r\n    return useAsyncEndpoint(data => ({ url: ENDPOINT_URL, method: \"GET\", params : {text: data.text, temp: data.temperature}}));//Гет-запрос на сервер\r\n   /* return axios.get(data => (ENDPOINT_URL, {\r\n        params: {\r\n          text: data.text,\r\n          temp: data.temperature\r\n        }\r\n      }));*/\r\n}// ","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ENDPOINT_URL = \"https://api.pushkin.monetka.name/stih\";//куда делается запрос\r\n//const ENDPOINT_URL = \"http://46.17.97.44:5000/stih\";//куда делается запрос\r\nconst useAsyncEndpoint = fn => {\r\n    const [res, setRes] = React.useState({ data: null, complete: false, pending: false, error: false });\r\n    const [req, setReq] = React.useState();\r\n\r\n    React.useEffect(() => {\r\n        if (!req) return;\r\n        setRes({ data: null, pending: true, error: false, complete: false });\r\n        axios(req)\r\n            .then(res =>\r\n                setRes({ data: res.data, pending: false, error: false, complete: true })\r\n            )\r\n            .catch(() =>\r\n                setRes({ data: null, pending: false, error: true, complete: true })\r\n            );\r\n    }, [req]);\r\n    console.log(res);\r\n    return [res, (...args) => setReq(fn(...args))];\r\n}\r\n\r\nexport const postGeneratePoemEndpoint = () => {\r\n    /* eslint-disable react-hooks/rules-of-hooks */\r\n    \r\n    return useAsyncEndpoint(data => ({ url: ENDPOINT_URL, method: \"GET\", params : {name: data.name, temp: data.temperature, length: 100}}));//Гет-запрос на сервер\r\n   /* return axios.get(data => (ENDPOINT_URL, {\r\n        params: {\r\n          text: data.text,\r\n          temp: data.temperature\r\n        }\r\n      }));*/\r\n}// ","import { TextField } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button'\r\nimport {MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport './styles.scss';\r\nimport { postGenerateTextEndpoint } from './utils';\r\nimport { postGeneratePoemEndpoint } from './utilsPoem';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { YMInitializer } from 'react-yandex-metrika';\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport PropTypes from \"prop-types\";\r\nimport  Grid from '@material-ui/core/Grid';\r\nimport { IconButton } from '@material-ui/core';\r\nimport Autorenew from '@material-ui/icons/Autorenew';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport { withStyles } from '@material-ui/core/styles'\r\n\r\n\r\nconst TITLE = 'Neural Pushkin';\r\n\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      <Box p={3}>{children}</Box>\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-auto-tab-${index}`,\r\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const [toggle, setToggle] = useState(false);\r\n  const [togglePoem, setTogglePoem] = useState(false);\r\n  const [text, setText] = useState(\"Заходит Пушкин в магазин купить шляпу, а она ему\"); // установка текста по умолчанию\r\n  const [name, setName] = useState()\r\n  const [poem, setPoem] = useState()\r\n  const [temperature, setTemperature] = useState(0.7);//установка температуры по умолча\r\n  const [generatedText, postGenerateText] = postGenerateTextEndpoint();\r\n  const [generatedPoem, postGeneratePoem] = postGeneratePoemEndpoint();\r\n\r\n  const [value, setValue] = React.useState(0);\r\n\r\n\r\n  const styles = {\r\n    root: {\r\n      marginLeft: 5\r\n    }\r\n  }\r\n  const SpinnerAdornment = withStyles(styles)(props => (\r\n    <CircularProgress\r\n      className={props.classes.spinner}\r\n      size={10}\r\n      style={{marginLeft: \"0.5em\"}}\r\n    />\r\n  ))\r\n  const AdornedButton = (props) => {\r\n    const {\r\n      children,\r\n      loading,\r\n      ...rest\r\n    } = props\r\n    return (\r\n      <Button size=\"large\" style={{ marginTop: '1em', marginBottom: '1em', width: 'fit-content', paddingBottom: '2em', backgroundColor: 'transparent'}}\r\n  \r\n      color=\"primary\"\r\n      {...rest}>\r\n         \r\n        {children}\r\n        {loading && <SpinnerAdornment  {...rest} />}\r\n        \r\n      </Button>\r\n    )\r\n  }\r\n\r\n\r\n  function handleTab(event, newValue) {\r\n    setValue(newValue);\r\n  }\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      width: 300,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      textAlign: 'center',\r\n    },\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    setText(event.target.value); //обновление текста\r\n  };\r\n\r\n  const handleName = (event) => {\r\n    setName(event.target.value); //обновление текста\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = TITLE;\r\n  }, []);\r\n\r\n  const THEME = createMuiTheme({\r\n    typography: {\r\n     \"fontFamily\": `\"bikham\",\"MinionPro\",  sans-serif`,\r\n     \"fontSize\": 16,\r\n     \"fontWeightLight\": 300,\r\n     \"fontWeightRegular\": 400,\r\n     \"fontWeightMedium\": 500\r\n    }\r\n  });\r\n\r\n\r\n  const generateText = () => {\r\n    generatedText.complete = false;\r\n    postGenerateText({ text, temperature});\r\n    setToggle(false);\r\n  }\r\n\r\n  const generatePoem = () => {\r\n    generatedPoem.complete = false;\r\n    postGeneratePoem({ name, temperature});\r\n    setTogglePoem(false);\r\n  }\r\n\r\n  if (generatedText.complete && !generatedText.error && !toggle){\r\n    setText(generatedText.data.text);\r\n    setToggle(true);// обновление текста при получение ответа от сервера\r\n  }\r\n\r\n  if (generatedPoem.complete && !generatedPoem.error && !togglePoem){\r\n    setPoem(generatedPoem.data.text.split(\"poem:start\")[1]);\r\n    setTogglePoem(true);\r\n  }\r\n\r\n  function valuetext(value) {\r\n    setTemperature(value); //установка температуры со слайдера\r\n  }\r\n\r\n  const classes = useStyles();\r\n  return (\r\n  <MuiThemeProvider theme ={THEME}>\r\n  \r\n  <div className='app-container'>\r\n  \r\n      \r\n        \r\n    <YMInitializer accounts={[83274316]} options={{webvisor: true}} />\r\n        \r\n      \r\n    \r\n    <form noValidate autoComplete='off'>\r\n    <div className='centering'>\r\n      <h1>Neural Pushkin</h1>\r\n      <img src=\"npushkin2.jpg\" width=\"250\" height=\"250\" alt=\"Neural Pushkin\"></img>\r\n      </div>\r\n      \r\n      <Typography id=\"discrete-slider\"  > Уровень креативности </Typography>\r\n      <Slider\r\n        defaultValue={0.7}\r\n        getAriaValueText={valuetext}\r\n        aria-labelledby=\"discrete-slider\"\r\n        valueLabelDisplay=\"auto\"\r\n        step={0.1}\r\n        marks\r\n        min={0.1}\r\n        max={2}\r\n      />\r\n      <p></p>\r\n      <AppBar position=\"static\" color=\"transparent\" elevation={0} >\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleTab}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"standart\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"standart auto tabs example\"\r\n          centered\r\n        >\r\n          <Tab label=\"Стихи\" {...a11yProps(0)} />\r\n          <Tab label=\"Проза\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n      <div class=\"centering\">\r\n      <font face = \"MinionPro\">\r\n      <TextField className='form textinput ' label=\"Название стиха...\"  onChange={handleName} />\r\n      \r\n      <Typography  style={{whiteSpace: 'pre-line', fontSize:20 }}>{poem}</Typography>\r\n      \r\n      <AdornedButton onClick={generatePoem} loading = {generatedPoem.pending}>Допушкинизировать</AdornedButton>\r\n      </font>\r\n      </div>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n      <TextField className='form textinput' multiline fullWidth value={text} onChange={handleChange} />\r\n      <Box textAlign='center'>\r\n      <AdornedButton onClick={generateText} loading = {generatedText.pending}>Допушкинизировать</AdornedButton>\r\n      </Box>\r\n      </TabPanel>\r\n     \r\n      \r\n    </form>\r\n\r\n   \r\n\r\n        <div className='centering'> \r\n        <p>Created by <a href=\"https://t.me/lovedeathtransformers\">Alex Wortega</a>, <a href=\"https://t.me/def_model_train\">Arina Puсhkova</a></p>\r\n        <p>Front by <a href=\"https://github.com/TimofeyKorzh\">Timofey Korzhebin</a></p>\r\n        <p>Благодарим за информационную поддержку <br></br><a href=\"https://t.me/NeuralShit\">NeuralShit</a>, <a href=\"https://t.me/denissexy\">DenisSexyIt</a>, <a href=\"https://t.me/DeepFaker\">Deepfaker</a></p>\r\n\r\n        <p>Neural Pushkin in <a href=\"https://twitter.com/NeuralPushkin\">Twitter</a></p>\r\n        <p>Сбор средств на <a href=\"https://www.tinkoff.ru/sl/6Nv1r2nsuiQ\">лучшие сервера</a> для Пушкина</p>\r\n        </div>\r\n        \r\n  </div>\r\n  </MuiThemeProvider>\r\n);\r\n\r\n}\r\n\r\nexport default App;\r\n/*<p>Мы вышли в стадию открытого бета-тестирования!<br></br> Начните писать ниже, а нейросеть продолжит...</p>\r\n      <p>Сбор средств на <a href=\"https://www.tinkoff.ru/sl/6Nv1r2nsuiQ\">лучшие сервера</a> для Пушкина</p>\r\n      <p>!ВНИМАНИЕ! Сейчас сервер находится под интенсивной нагрузкой и генерация может длиться вплоть до часа!</p>*/","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}