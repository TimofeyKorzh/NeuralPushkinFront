{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tkorg\\\\Projects\\\\neuralpushkin\\\\gpt-2-frontend\\\\src\\\\App.js\";\n\n/*import React, { useState } from 'react';\r\nimport Button from './components/Button';\r\nimport SelectBox from './components/SelectBox';\r\nimport TextBox from './components/TextBox';\r\nimport './styles.scss';\r\nimport { postGenerateTextEndpoint } from './utils';\r\n*/\nimport { TextField } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport Button from './components/Button';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport './styles.scss';\nimport { postGenerateTextEndpoint } from './utils';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport { makeStyles } from '@material-ui/core/styles';\nconst TITLE = 'Neural pushkin';\n\nfunction App() {\n  const [toggle, setToggle] = useState(false);\n  const [text, setText] = useState(\"\");\n  const [temperature, setTemperature] = useState(1); //const [model, setModel] = useState('gpt2');\n\n  const model = \"345M\";\n  const [generatedText, postGenerateText] = postGenerateTextEndpoint();\n  const useStyles = makeStyles({\n    root: {\n      width: 300\n    }\n  });\n\n  const handleChange = event => {\n    setText(event.target.value);\n  };\n\n  useEffect(() => {\n    document.title = TITLE;\n  }, []);\n  const THEME = createMuiTheme({\n    typography: {\n      \"fontFamily\": `\"MinionPro\", sans-serif`,\n      \"fontSize\": 14,\n      \"fontWeightLight\": 300,\n      \"fontWeightRegular\": 400,\n      \"fontWeightMedium\": 500\n    }\n  });\n\n  const generateText = () => {\n    generatedText.complete = false;\n    postGenerateText({\n      text,\n      model,\n      userId: 1\n    });\n    setToggle(false);\n  };\n\n  if (generatedText.complete && !generatedText.error && !toggle) {\n    setText(text + generatedText.data.result);\n    setToggle(true);\n  }\n\n  function valuetext(value) {\n    setTemperature(value); //console.log(temperature)\n    //return `${value}Â°C`;\n  }\n\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(MuiThemeProvider, {\n    theme: THEME,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Neural Pushkin\"), /*#__PURE__*/React.createElement(Typography, {\n    id: \"discrete-slider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \" \\u0423\\u0440\\u043E\\u0432\\u0435\\u043D\\u044C \\u043A\\u0440\\u0435\\u0430\\u0442\\u0438\\u0432\\u043D\\u043E\\u0441\\u0442\\u0438 \"), /*#__PURE__*/React.createElement(Slider, {\n    defaultValue: 1,\n    getAriaValueText: valuetext,\n    \"aria-labelledby\": \"discrete-slider\",\n    valueLabelDisplay: \"auto\",\n    step: 0.1,\n    marks: true,\n    min: 0.1,\n    max: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    className: \"form textinput\",\n    multiline: true,\n    fullWidth: true,\n    value: text,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: generateText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  })), generatedText.pending && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result pending\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"\\u041F\\u043E\\u0434\\u043E\\u0436\\u0434\\u0438\\u0442\\u0435!\"), generatedText.complete && (generatedText.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"\\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u0430\\u044F \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u0430\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result valid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, generatedText.data.result))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/tkorg/Projects/neuralpushkin/gpt-2-frontend/src/App.js"],"names":["TextField","React","useEffect","useState","Button","MuiThemeProvider","createMuiTheme","postGenerateTextEndpoint","Typography","Slider","makeStyles","TITLE","App","toggle","setToggle","text","setText","temperature","setTemperature","model","generatedText","postGenerateText","useStyles","root","width","handleChange","event","target","value","document","title","THEME","typography","generateText","complete","userId","error","data","result","valuetext","classes","pending"],"mappings":"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","sourcesContent":["/*import React, { useState } from 'react';\r\nimport Button from './components/Button';\r\nimport SelectBox from './components/SelectBox';\r\nimport TextBox from './components/TextBox';\r\nimport './styles.scss';\r\nimport { postGenerateTextEndpoint } from './utils';\r\n*/\r\nimport { TextField } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Button from './components/Button';\r\nimport {MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport './styles.scss';\r\nimport { postGenerateTextEndpoint } from './utils';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst TITLE = 'Neural pushkin';\r\n\r\nfunction App() {\r\n  const [toggle, setToggle] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n  const [temperature, setTemperature] = useState(1);\r\n  //const [model, setModel] = useState('gpt2');\r\n  const model = \"345M\";\r\n  const [generatedText, postGenerateText] = postGenerateTextEndpoint();\r\n\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      width: 300,\r\n    },\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = TITLE;\r\n  }, []);\r\n\r\n  const THEME = createMuiTheme({\r\n    typography: {\r\n     \"fontFamily\": `\"MinionPro\", sans-serif`,\r\n     \"fontSize\": 14,\r\n     \"fontWeightLight\": 300,\r\n     \"fontWeightRegular\": 400,\r\n     \"fontWeightMedium\": 500\r\n    }\r\n  });\r\n\r\n\r\n  const generateText = () => {\r\n    generatedText.complete = false;\r\n    postGenerateText({ text, model, userId: 1 });\r\n    setToggle(false);\r\n  }\r\n\r\n  if (generatedText.complete && !generatedText.error && !toggle){\r\n    setText(text+generatedText.data.result);\r\n    setToggle(true);\r\n  }\r\n\r\n\r\n  function valuetext(value) {\r\n    setTemperature(value);\r\n    //console.log(temperature)\r\n    //return `${value}Â°C`;\r\n  }\r\n\r\n  const classes = useStyles();\r\n  return (\r\n  <MuiThemeProvider theme ={THEME}>\r\n  \r\n  <div className='app-container'>\r\n  \r\n  \r\n      \r\n    <form noValidate autoComplete='off'>\r\n      <h1>Neural Pushkin</h1>\r\n      <Typography id=\"discrete-slider\"  > Ð£ÑÐ¾Ð²ÐµÐ½Ñ ÐºÑÐµÐ°ÑÐ¸Ð²Ð½Ð¾ÑÑÐ¸ </Typography>\r\n      <Slider\r\n        defaultValue={1}\r\n        getAriaValueText={valuetext}\r\n        aria-labelledby=\"discrete-slider\"\r\n        valueLabelDisplay=\"auto\"\r\n        step={0.1}\r\n        marks\r\n        min={0.1}\r\n        max={2}\r\n      />\r\n      <TextField className='form textinput' multiline fullWidth value={text} onChange={handleChange} />\r\n      <Button onClick={generateText} />\r\n    </form>\r\n\r\n    {generatedText.pending &&\r\n      <div className='result pending'>ÐÐ¾Ð´Ð¾Ð¶Ð´Ð¸ÑÐµ!</div>}\r\n\r\n    {generatedText.complete &&\r\n      (generatedText.error ?\r\n        <div className='result error'>ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½Ð°Ñ Ð¾ÑÐ¸Ð±ÐºÐ° Ð·Ð°Ð¿ÑÐ¾ÑÐ°</div> :\r\n        <div className='result valid'>\r\n          {generatedText.data.result}\r\n        </div>)}\r\n  </div>\r\n  </MuiThemeProvider>\r\n);\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}