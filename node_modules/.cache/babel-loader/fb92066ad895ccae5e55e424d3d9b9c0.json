{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tkorg\\\\Projects\\\\neuralpushkin\\\\gpt-2-frontend\\\\src\\\\App.js\";\n\n/*import React, { useState } from 'react';\r\nimport Button from './components/Button';\r\nimport SelectBox from './components/SelectBox';\r\nimport TextBox from './components/TextBox';\r\nimport './styles.scss';\r\nimport { postGenerateTextEndpoint } from './utils';\r\n*/\nimport { TextField } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport Button from './components/Button';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport './styles.scss';\nimport { postGenerateTextEndpoint } from './utils';\nconst TITLE = 'Neural pushkin';\n\nfunction App() {\n  const [toggle, setToggle] = useState(false);\n  const [text, setText] = useState(\"\"); //const [model, setModel] = useState('gpt2');\n\n  const model = \"345M\";\n  const [generatedText, postGenerateText] = postGenerateTextEndpoint();\n\n  const handleChange = event => {\n    setText(event.target.value);\n  };\n\n  useEffect(() => {\n    document.title = TITLE;\n  }, []);\n  const THEME = createMuiTheme({\n    typography: {\n      \"fontFamily\": `\"MinionPro\", sans-serif`,\n      \"fontSize\": 14,\n      \"fontWeightLight\": 300,\n      \"fontWeightRegular\": 400,\n      \"fontWeightMedium\": 500\n    }\n  });\n\n  const generateText = () => {\n    generatedText.complete = false;\n    postGenerateText({\n      text,\n      model,\n      userId: 1\n    });\n    setToggle(false);\n  };\n\n  if (generatedText.complete && !generatedText.error && !toggle) {\n    setText(text + generatedText.data.result);\n    setToggle(true);\n  }\n\n  return (\n    /*#__PURE__*/\n\n    /*  <div className='app-container'>\r\n        <form noValidate autoComplete='off'>\r\n          <h1>Neural pushkin</h1>\r\n          \r\n          <TextBox text={text} setText={setText} />\r\n          <Button onClick={generateText} />\r\n        </form>\r\n          {generatedText.pending &&\r\n          <div className='result pending'>Please wait</div>}\r\n          {generatedText.complete &&\r\n          (generatedText.error ?\r\n            <div className='result error'>Bad Request</div> :\r\n            <div className='result valid'>\r\n              {generatedText.data.result}\r\n            </div>)}\r\n      </div>\r\n    );*/\n    React.createElement(MuiThemeProvider, {\n      theme: THEME,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      noValidate: true,\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, \"Neural Pushkin\"), /*#__PURE__*/React.createElement(TextField, {\n      className: \"form textinput\",\n      multiline: true,\n      fullWidth: true,\n      value: text,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: generateText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    })), generatedText.pending && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"result pending\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, \"\\u041F\\u043E\\u0434\\u043E\\u0436\\u0434\\u0438\\u0442\\u0435!\"), generatedText.complete && (generatedText.error ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"result error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, \"\\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u0430\\u044F \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u0430\") : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"result valid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, generatedText.data.result))))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/tkorg/Projects/neuralpushkin/gpt-2-frontend/src/App.js"],"names":["TextField","React","useEffect","useState","Button","MuiThemeProvider","createMuiTheme","postGenerateTextEndpoint","TITLE","App","toggle","setToggle","text","setText","model","generatedText","postGenerateText","handleChange","event","target","value","document","title","THEME","typography","generateText","complete","userId","error","data","result","pending"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,mBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,gBAAR,EAA0BC,cAA1B,QAAgD,0BAAhD;AACA,OAAO,eAAP;AACA,SAASC,wBAAT,QAAyC,SAAzC;AACA,MAAMC,KAAK,GAAG,gBAAd;;AACA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC,CAFa,CAGb;;AACA,QAAMW,KAAK,GAAG,MAAd;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,wBAAwB,EAAlE;;AAEA,QAAMU,YAAY,GAAIC,KAAD,IAAW;AAC9BL,IAAAA,OAAO,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,GAFD;;AAIAlB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,QAAQ,CAACC,KAAT,GAAiBd,KAAjB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMe,KAAK,GAAGjB,cAAc,CAAC;AAC3BkB,IAAAA,UAAU,EAAE;AACX,oBAAe,yBADJ;AAEX,kBAAY,EAFD;AAGX,yBAAmB,GAHR;AAIX,2BAAqB,GAJV;AAKX,0BAAoB;AALT;AADe,GAAD,CAA5B;;AAWA,QAAMC,YAAY,GAAG,MAAM;AACzBV,IAAAA,aAAa,CAACW,QAAd,GAAyB,KAAzB;AACAV,IAAAA,gBAAgB,CAAC;AAAEJ,MAAAA,IAAF;AAAQE,MAAAA,KAAR;AAAea,MAAAA,MAAM,EAAE;AAAvB,KAAD,CAAhB;AACAhB,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAJD;;AAMA,MAAII,aAAa,CAACW,QAAd,IAA0B,CAACX,aAAa,CAACa,KAAzC,IAAkD,CAAClB,MAAvD,EAA8D;AAC5DG,IAAAA,OAAO,CAACD,IAAI,GAACG,aAAa,CAACc,IAAd,CAAmBC,MAAzB,CAAP;AACAnB,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED;AAAA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE,wBAAC,gBAAD;AAAkB,MAAA,KAAK,EAAGY,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,UAAU,MAAhB;AAAiB,MAAA,YAAY,EAAC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,gBAArB;AAAsC,MAAA,SAAS,MAA/C;AAAgD,MAAA,SAAS,MAAzD;AAA0D,MAAA,KAAK,EAAEX,IAAjE;AAAuE,MAAA,QAAQ,EAAEK,YAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEQ,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,EAOGV,aAAa,CAACgB,OAAd,iBACC;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEARJ,EAUGhB,aAAa,CAACW,QAAd,KACEX,aAAa,CAACa,KAAd,gBACC;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4JADD,gBAEC;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGb,aAAa,CAACc,IAAd,CAAmBC,MADtB,CAHH,CAVH,CAFA;AApBA;AA0CD;;AAED,eAAerB,GAAf","sourcesContent":["/*import React, { useState } from 'react';\r\nimport Button from './components/Button';\r\nimport SelectBox from './components/SelectBox';\r\nimport TextBox from './components/TextBox';\r\nimport './styles.scss';\r\nimport { postGenerateTextEndpoint } from './utils';\r\n*/\r\nimport { TextField } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Button from './components/Button';\r\nimport {MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport './styles.scss';\r\nimport { postGenerateTextEndpoint } from './utils';\r\nconst TITLE = 'Neural pushkin';\r\nfunction App() {\r\n  const [toggle, setToggle] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n  //const [model, setModel] = useState('gpt2');\r\n  const model = \"345M\";\r\n  const [generatedText, postGenerateText] = postGenerateTextEndpoint();\r\n\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = TITLE;\r\n  }, []);\r\n\r\n  const THEME = createMuiTheme({\r\n    typography: {\r\n     \"fontFamily\": `\"MinionPro\", sans-serif`,\r\n     \"fontSize\": 14,\r\n     \"fontWeightLight\": 300,\r\n     \"fontWeightRegular\": 400,\r\n     \"fontWeightMedium\": 500\r\n    }\r\n  });\r\n\r\n\r\n  const generateText = () => {\r\n    generatedText.complete = false;\r\n    postGenerateText({ text, model, userId: 1 });\r\n    setToggle(false);\r\n  }\r\n\r\n  if (generatedText.complete && !generatedText.error && !toggle){\r\n    setText(text+generatedText.data.result);\r\n    setToggle(true);\r\n  }\r\n\r\n  return (\r\n  /*  <div className='app-container'>\r\n      <form noValidate autoComplete='off'>\r\n        <h1>Neural pushkin</h1>\r\n        \r\n        <TextBox text={text} setText={setText} />\r\n        <Button onClick={generateText} />\r\n      </form>\r\n\r\n      {generatedText.pending &&\r\n        <div className='result pending'>Please wait</div>}\r\n\r\n      {generatedText.complete &&\r\n        (generatedText.error ?\r\n          <div className='result error'>Bad Request</div> :\r\n          <div className='result valid'>\r\n            {generatedText.data.result}\r\n          </div>)}\r\n    </div>\r\n  );*/\r\n  <MuiThemeProvider theme ={THEME}>\r\n  \r\n  <div className='app-container'>\r\n    <form noValidate autoComplete='off'>\r\n      <h1>Neural Pushkin</h1>\r\n      <TextField className='form textinput' multiline fullWidth value={text} onChange={handleChange} />\r\n      <Button onClick={generateText} />\r\n    </form>\r\n\r\n    {generatedText.pending &&\r\n      <div className='result pending'>Подождите!</div>}\r\n\r\n    {generatedText.complete &&\r\n      (generatedText.error ?\r\n        <div className='result error'>Неизвестная ошибка запроса</div> :\r\n        <div className='result valid'>\r\n          {generatedText.data.result}\r\n        </div>)}\r\n  </div>\r\n  </MuiThemeProvider>\r\n);\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}